class WebSerial{constructor(t){const{host:e="localhost",port:s=8135,log:i=!1}=t||{};this.serverURL=`http://${e}:${s}`,this.events={},this.data="",this.isConnected=!1,this.on("server-update",t=>{i&&console.log(t?"Connected to websocket server":"Disconnected from websocket server")}),this.on("serialport-update",t=>{this.isConnected=t,this.dispatchEvent(this.isConnected?"connect":"disconnect"),i&&console.log(this.isConnected?"Connected to Serial":"Disconnected from Serial")}),this.on("data",t=>{this.isConnected=!0,this.data=t,i&&console.log(`data received: ${t}`)});const n=document.createElement("script");n.src=`${this.serverURL}/socket.io/socket.io.js`,n.addEventListener("load",t=>{const e=io(this.serverURL);e.on("connect",()=>this.dispatchEvent("server-update",!0)),e.on("disconnect",()=>{this.isConnected=!1,this.dispatchEvent("server-update",!1),this.dispatchEvent("disconnect")}),e.on("serialport-update",t=>{t!==this.isConnected&&this.dispatchEvent("serialport-update",t)}),e.on("data",t=>this.dispatchEvent("data",t)),this.on("write",t=>{i&&console.log(`Writing data: ${t}`),e.emit("write",t)})}),document.head.appendChild(n)}registerEvent(t){const e=new class{constructor(t){this.name=t,this.callbacks=[]}registerCallback(t){this.callbacks.push(t)}}(t);this.events[t]=e}dispatchEvent(t,e){this.events[t]&&this.events[t].callbacks.forEach(t=>{t(e)})}on(t,e){this.events[t]||this.registerEvent(t),this.events[t].registerCallback(e)}write(t){this.dispatchEvent("write",t)}}